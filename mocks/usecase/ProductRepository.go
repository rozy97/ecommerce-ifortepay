// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rozy97/ecommerce-ifortepay/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) CreateProduct(ctx context.Context, product *model.Product) (uint64, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product) (uint64, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product) uint64); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product *model.Product
func (_e *ProductRepository_Expecter) CreateProduct(ctx interface{}, product interface{}) *ProductRepository_CreateProduct_Call {
	return &ProductRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *ProductRepository_CreateProduct_Call) Run(run func(ctx context.Context, product *model.Product)) *ProductRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Product))
	})
	return _c
}

func (_c *ProductRepository_CreateProduct_Call) Return(_a0 uint64, _a1 error) *ProductRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_CreateProduct_Call) RunAndReturn(run func(context.Context, *model.Product) (uint64, error)) *ProductRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, ID
func (_m *ProductRepository) GetProductByID(ctx context.Context, ID uint64) (*model.Product, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Product, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Product); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type ProductRepository_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uint64
func (_e *ProductRepository_Expecter) GetProductByID(ctx interface{}, ID interface{}) *ProductRepository_GetProductByID_Call {
	return &ProductRepository_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, ID)}
}

func (_c *ProductRepository_GetProductByID_Call) Run(run func(ctx context.Context, ID uint64)) *ProductRepository_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ProductRepository_GetProductByID_Call) Return(_a0 *model.Product, _a1 error) *ProductRepository_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProductByID_Call) RunAndReturn(run func(context.Context, uint64) (*model.Product, error)) *ProductRepository_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductPromotionsByProductIDs provides a mock function with given fields: ctx, ProductID
func (_m *ProductRepository) GetProductPromotionsByProductIDs(ctx context.Context, ProductID []uint64) ([]model.ProductPromotion, error) {
	ret := _m.Called(ctx, ProductID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductPromotionsByProductIDs")
	}

	var r0 []model.ProductPromotion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) ([]model.ProductPromotion, error)); ok {
		return rf(ctx, ProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) []model.ProductPromotion); ok {
		r0 = rf(ctx, ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductPromotion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64) error); ok {
		r1 = rf(ctx, ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProductPromotionsByProductIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductPromotionsByProductIDs'
type ProductRepository_GetProductPromotionsByProductIDs_Call struct {
	*mock.Call
}

// GetProductPromotionsByProductIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ProductID []uint64
func (_e *ProductRepository_Expecter) GetProductPromotionsByProductIDs(ctx interface{}, ProductID interface{}) *ProductRepository_GetProductPromotionsByProductIDs_Call {
	return &ProductRepository_GetProductPromotionsByProductIDs_Call{Call: _e.mock.On("GetProductPromotionsByProductIDs", ctx, ProductID)}
}

func (_c *ProductRepository_GetProductPromotionsByProductIDs_Call) Run(run func(ctx context.Context, ProductID []uint64)) *ProductRepository_GetProductPromotionsByProductIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *ProductRepository_GetProductPromotionsByProductIDs_Call) Return(_a0 []model.ProductPromotion, _a1 error) *ProductRepository_GetProductPromotionsByProductIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProductPromotionsByProductIDs_Call) RunAndReturn(run func(context.Context, []uint64) ([]model.ProductPromotion, error)) *ProductRepository_GetProductPromotionsByProductIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function with given fields: ctx, limit, offset
func (_m *ProductRepository) GetProducts(ctx context.Context, limit uint, offset uint) (model.Products, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 model.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (model.Products, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) model.Products); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type ProductRepository_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint
//   - offset uint
func (_e *ProductRepository_Expecter) GetProducts(ctx interface{}, limit interface{}, offset interface{}) *ProductRepository_GetProducts_Call {
	return &ProductRepository_GetProducts_Call{Call: _e.mock.On("GetProducts", ctx, limit, offset)}
}

func (_c *ProductRepository_GetProducts_Call) Run(run func(ctx context.Context, limit uint, offset uint)) *ProductRepository_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *ProductRepository_GetProducts_Call) Return(_a0 model.Products, _a1 error) *ProductRepository_GetProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProducts_Call) RunAndReturn(run func(context.Context, uint, uint) (model.Products, error)) *ProductRepository_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductsByIDs provides a mock function with given fields: ctx, IDs
func (_m *ProductRepository) GetProductsByIDs(ctx context.Context, IDs []uint64) (model.Products, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByIDs")
	}

	var r0 model.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) (model.Products, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) model.Products); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProductsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductsByIDs'
type ProductRepository_GetProductsByIDs_Call struct {
	*mock.Call
}

// GetProductsByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uint64
func (_e *ProductRepository_Expecter) GetProductsByIDs(ctx interface{}, IDs interface{}) *ProductRepository_GetProductsByIDs_Call {
	return &ProductRepository_GetProductsByIDs_Call{Call: _e.mock.On("GetProductsByIDs", ctx, IDs)}
}

func (_c *ProductRepository_GetProductsByIDs_Call) Run(run func(ctx context.Context, IDs []uint64)) *ProductRepository_GetProductsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *ProductRepository_GetProductsByIDs_Call) Return(_a0 model.Products, _a1 error) *ProductRepository_GetProductsByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProductsByIDs_Call) RunAndReturn(run func(context.Context, []uint64) (model.Products, error)) *ProductRepository_GetProductsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

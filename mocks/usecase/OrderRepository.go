// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rozy97/ecommerce-ifortepay/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) CreateOrder(ctx context.Context, order *model.Order) (uint64, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) (uint64, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) uint64); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *model.Order
func (_e *OrderRepository_Expecter) CreateOrder(ctx interface{}, order interface{}) *OrderRepository_CreateOrder_Call {
	return &OrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *OrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, order *model.Order)) *OrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Order))
	})
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) Return(_a0 uint64, _a1 error) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, *model.Order) (uint64, error)) *OrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrderItem provides a mock function with given fields: ctx, orderItem
func (_m *OrderRepository) CreateOrderItem(ctx context.Context, orderItem *model.OrderItem) {
	_m.Called(ctx, orderItem)
}

// OrderRepository_CreateOrderItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrderItem'
type OrderRepository_CreateOrderItem_Call struct {
	*mock.Call
}

// CreateOrderItem is a helper method to define mock.On call
//   - ctx context.Context
//   - orderItem *model.OrderItem
func (_e *OrderRepository_Expecter) CreateOrderItem(ctx interface{}, orderItem interface{}) *OrderRepository_CreateOrderItem_Call {
	return &OrderRepository_CreateOrderItem_Call{Call: _e.mock.On("CreateOrderItem", ctx, orderItem)}
}

func (_c *OrderRepository_CreateOrderItem_Call) Run(run func(ctx context.Context, orderItem *model.OrderItem)) *OrderRepository_CreateOrderItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.OrderItem))
	})
	return _c
}

func (_c *OrderRepository_CreateOrderItem_Call) Return() *OrderRepository_CreateOrderItem_Call {
	_c.Call.Return()
	return _c
}

func (_c *OrderRepository_CreateOrderItem_Call) RunAndReturn(run func(context.Context, *model.OrderItem)) *OrderRepository_CreateOrderItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByID provides a mock function with given fields: ctx, ID
func (_m *OrderRepository) GetOrderByID(ctx context.Context, ID uint64) (*model.Order, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Order, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Order); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByID'
type OrderRepository_GetOrderByID_Call struct {
	*mock.Call
}

// GetOrderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uint64
func (_e *OrderRepository_Expecter) GetOrderByID(ctx interface{}, ID interface{}) *OrderRepository_GetOrderByID_Call {
	return &OrderRepository_GetOrderByID_Call{Call: _e.mock.On("GetOrderByID", ctx, ID)}
}

func (_c *OrderRepository_GetOrderByID_Call) Run(run func(ctx context.Context, ID uint64)) *OrderRepository_GetOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRepository_GetOrderByID_Call) Return(_a0 *model.Order, _a1 error) *OrderRepository_GetOrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrderByID_Call) RunAndReturn(run func(context.Context, uint64) (*model.Order, error)) *OrderRepository_GetOrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderItemsByOrderID provides a mock function with given fields: ctx, orderID
func (_m *OrderRepository) GetOrderItemsByOrderID(ctx context.Context, orderID uint64) ([]model.OrderItem, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByOrderID")
	}

	var r0 []model.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]model.OrderItem, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.OrderItem); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrderItemsByOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItemsByOrderID'
type OrderRepository_GetOrderItemsByOrderID_Call struct {
	*mock.Call
}

// GetOrderItemsByOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uint64
func (_e *OrderRepository_Expecter) GetOrderItemsByOrderID(ctx interface{}, orderID interface{}) *OrderRepository_GetOrderItemsByOrderID_Call {
	return &OrderRepository_GetOrderItemsByOrderID_Call{Call: _e.mock.On("GetOrderItemsByOrderID", ctx, orderID)}
}

func (_c *OrderRepository_GetOrderItemsByOrderID_Call) Run(run func(ctx context.Context, orderID uint64)) *OrderRepository_GetOrderItemsByOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRepository_GetOrderItemsByOrderID_Call) Return(_a0 []model.OrderItem, _a1 error) *OrderRepository_GetOrderItemsByOrderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrderItemsByOrderID_Call) RunAndReturn(run func(context.Context, uint64) ([]model.OrderItem, error)) *OrderRepository_GetOrderItemsByOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersByUserID provides a mock function with given fields: ctx, userID
func (_m *OrderRepository) GetOrdersByUserID(ctx context.Context, userID uint64) ([]model.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUserID")
	}

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]model.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetOrdersByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersByUserID'
type OrderRepository_GetOrdersByUserID_Call struct {
	*mock.Call
}

// GetOrdersByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *OrderRepository_Expecter) GetOrdersByUserID(ctx interface{}, userID interface{}) *OrderRepository_GetOrdersByUserID_Call {
	return &OrderRepository_GetOrdersByUserID_Call{Call: _e.mock.On("GetOrdersByUserID", ctx, userID)}
}

func (_c *OrderRepository_GetOrdersByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *OrderRepository_GetOrdersByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRepository_GetOrdersByUserID_Call) Return(_a0 []model.Order, _a1 error) *OrderRepository_GetOrdersByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetOrdersByUserID_Call) RunAndReturn(run func(context.Context, uint64) ([]model.Order, error)) *OrderRepository_GetOrdersByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

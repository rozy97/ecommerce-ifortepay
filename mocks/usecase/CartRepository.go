// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rozy97/ecommerce-ifortepay/model"
	mock "github.com/stretchr/testify/mock"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

type CartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CartRepository) EXPECT() *CartRepository_Expecter {
	return &CartRepository_Expecter{mock: &_m.Mock}
}

// CreateCart provides a mock function with given fields: ctx, cart
func (_m *CartRepository) CreateCart(ctx context.Context, cart *model.Cart) (uint64, error) {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cart) (uint64, error)); ok {
		return rf(ctx, cart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cart) uint64); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Cart) error); ok {
		r1 = rf(ctx, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartRepository_CreateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCart'
type CartRepository_CreateCart_Call struct {
	*mock.Call
}

// CreateCart is a helper method to define mock.On call
//   - ctx context.Context
//   - cart *model.Cart
func (_e *CartRepository_Expecter) CreateCart(ctx interface{}, cart interface{}) *CartRepository_CreateCart_Call {
	return &CartRepository_CreateCart_Call{Call: _e.mock.On("CreateCart", ctx, cart)}
}

func (_c *CartRepository_CreateCart_Call) Run(run func(ctx context.Context, cart *model.Cart)) *CartRepository_CreateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Cart))
	})
	return _c
}

func (_c *CartRepository_CreateCart_Call) Return(_a0 uint64, _a1 error) *CartRepository_CreateCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartRepository_CreateCart_Call) RunAndReturn(run func(context.Context, *model.Cart) (uint64, error)) *CartRepository_CreateCart_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCartItem provides a mock function with given fields: ctx, cartItem
func (_m *CartRepository) CreateCartItem(ctx context.Context, cartItem *model.CartItem) (uint64, error) {
	ret := _m.Called(ctx, cartItem)

	if len(ret) == 0 {
		panic("no return value specified for CreateCartItem")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CartItem) (uint64, error)); ok {
		return rf(ctx, cartItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CartItem) uint64); ok {
		r0 = rf(ctx, cartItem)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CartItem) error); ok {
		r1 = rf(ctx, cartItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartRepository_CreateCartItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCartItem'
type CartRepository_CreateCartItem_Call struct {
	*mock.Call
}

// CreateCartItem is a helper method to define mock.On call
//   - ctx context.Context
//   - cartItem *model.CartItem
func (_e *CartRepository_Expecter) CreateCartItem(ctx interface{}, cartItem interface{}) *CartRepository_CreateCartItem_Call {
	return &CartRepository_CreateCartItem_Call{Call: _e.mock.On("CreateCartItem", ctx, cartItem)}
}

func (_c *CartRepository_CreateCartItem_Call) Run(run func(ctx context.Context, cartItem *model.CartItem)) *CartRepository_CreateCartItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CartItem))
	})
	return _c
}

func (_c *CartRepository_CreateCartItem_Call) Return(_a0 uint64, _a1 error) *CartRepository_CreateCartItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartRepository_CreateCartItem_Call) RunAndReturn(run func(context.Context, *model.CartItem) (uint64, error)) *CartRepository_CreateCartItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardItemsByCardID provides a mock function with given fields: ctx, cartID, limit, offset
func (_m *CartRepository) GetCardItemsByCardID(ctx context.Context, cartID uint64, limit uint, offset uint) (model.CartItems, error) {
	ret := _m.Called(ctx, cartID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetCardItemsByCardID")
	}

	var r0 model.CartItems
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint, uint) (model.CartItems, error)); ok {
		return rf(ctx, cartID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint, uint) model.CartItems); ok {
		r0 = rf(ctx, cartID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CartItems)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint, uint) error); ok {
		r1 = rf(ctx, cartID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartRepository_GetCardItemsByCardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardItemsByCardID'
type CartRepository_GetCardItemsByCardID_Call struct {
	*mock.Call
}

// GetCardItemsByCardID is a helper method to define mock.On call
//   - ctx context.Context
//   - cartID uint64
//   - limit uint
//   - offset uint
func (_e *CartRepository_Expecter) GetCardItemsByCardID(ctx interface{}, cartID interface{}, limit interface{}, offset interface{}) *CartRepository_GetCardItemsByCardID_Call {
	return &CartRepository_GetCardItemsByCardID_Call{Call: _e.mock.On("GetCardItemsByCardID", ctx, cartID, limit, offset)}
}

func (_c *CartRepository_GetCardItemsByCardID_Call) Run(run func(ctx context.Context, cartID uint64, limit uint, offset uint)) *CartRepository_GetCardItemsByCardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint), args[3].(uint))
	})
	return _c
}

func (_c *CartRepository_GetCardItemsByCardID_Call) Return(_a0 model.CartItems, _a1 error) *CartRepository_GetCardItemsByCardID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartRepository_GetCardItemsByCardID_Call) RunAndReturn(run func(context.Context, uint64, uint, uint) (model.CartItems, error)) *CartRepository_GetCardItemsByCardID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCartByUserID provides a mock function with given fields: ctx, userID
func (_m *CartRepository) GetCartByUserID(ctx context.Context, userID uint64) (*model.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByUserID")
	}

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartRepository_GetCartByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCartByUserID'
type CartRepository_GetCartByUserID_Call struct {
	*mock.Call
}

// GetCartByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *CartRepository_Expecter) GetCartByUserID(ctx interface{}, userID interface{}) *CartRepository_GetCartByUserID_Call {
	return &CartRepository_GetCartByUserID_Call{Call: _e.mock.On("GetCartByUserID", ctx, userID)}
}

func (_c *CartRepository_GetCartByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *CartRepository_GetCartByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *CartRepository_GetCartByUserID_Call) Return(_a0 *model.Cart, _a1 error) *CartRepository_GetCartByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartRepository_GetCartByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*model.Cart, error)) *CartRepository_GetCartByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepository {
	mock := &CartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

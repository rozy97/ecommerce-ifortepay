// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/rozy97/ecommerce-ifortepay/request"

	response "github.com/rozy97/ecommerce-ifortepay/response"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

type UserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecase) EXPECT() *UserUsecase_Expecter {
	return &UserUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserUsecase) Login(ctx context.Context, req *request.Login) (*response.Login, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *response.Login
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Login) (*response.Login, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Login) *response.Login); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Login)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Login) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *request.Login
func (_e *UserUsecase_Expecter) Login(ctx interface{}, req interface{}) *UserUsecase_Login_Call {
	return &UserUsecase_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *UserUsecase_Login_Call) Run(run func(ctx context.Context, req *request.Login)) *UserUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.Login))
	})
	return _c
}

func (_c *UserUsecase_Login_Call) Return(_a0 *response.Login, _a1 error) *UserUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_Login_Call) RunAndReturn(run func(context.Context, *request.Login) (*response.Login, error)) *UserUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserUsecase) Register(ctx context.Context, req *request.Register) (*response.Register, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *response.Register
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Register) (*response.Register, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Register) *response.Register); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Register)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Register) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *request.Register
func (_e *UserUsecase_Expecter) Register(ctx interface{}, req interface{}) *UserUsecase_Register_Call {
	return &UserUsecase_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *UserUsecase_Register_Call) Run(run func(ctx context.Context, req *request.Register)) *UserUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*request.Register))
	})
	return _c
}

func (_c *UserUsecase_Register_Call) Return(_a0 *response.Register, _a1 error) *UserUsecase_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_Register_Call) RunAndReturn(run func(context.Context, *request.Register) (*response.Register, error)) *UserUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
